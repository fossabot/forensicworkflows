name: CI
on:
  push:
    branches: [ master ]
  pull_request:

jobs:

  unittests:
    name: Go Unittests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Setup go 1.13
        uses: actions/setup-go@v1
        with: {go-version: '1.13'}
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Set system path
        run: echo "##[add-path]$(go env GOPATH)/bin"
        shell: bash
      - name: Download dependencies
        run: go mod download
      - name: Install golangci-lint & go-acc
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.24.0
          go get -u github.com/ory/go-acc
        shell: bash
      - name: Setup Build
        run: |
          go generate
          go build

      - name: Lint
        run: golangci-lint run --verbose --config test/.golangci.yml --enable gofmt --enable goimports
        if: matrix.os != 'windows-latest'
        continue-on-error: true
      - name: Lint Windows
        run: golangci-lint run --verbose --config test/.golangci.yml
        if: matrix.os == 'windows-latest'
        continue-on-error: true

      - name: Download testdata
        run: bash test/download_testdata.sh
        shell: bash
      - name: Test
        run: go-acc ./...
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f coverage.txt
        # if: matrix.os == 'windows-latest'
        shell: bash

  integrationtests:
    name: Go Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Setup go 1.13
        uses: actions/setup-go@v1
        with: {go-version: '1.13'}
      - uses: actions/setup-python@v1
        with: {python-version: '3.8'}
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Set system path
        run: echo "##[add-path]$(go env GOPATH)/bin"
        shell: bash
      - name: Download dependencies
        run: go mod download

      - name: Setup Build
        run: go generate

      - name: Setup node
        uses: actions/setup-node@v1
        with: {node-version: '10.x'}
      - name: Install bats
        run: npm install -g bats

      - name: Install
        run: go install .

      - name: Install forensicstore
        run: go get github.com/forensicanalysis/forensicstore/cmd/forensicstore
      - name: Download testdata
        run: bash test/download_testdata.sh
        shell: bash
      - name: Bats test
        run: bats test/bats/forensicworkflows.bats
        shell: bash

      - name: Go Build
        run: |
          go build .
          mkdir bin
          mv forensicworkflows* bin
        shell: bash
      - name: Upload
        uses: actions/upload-artifact@master
        with:
          name: forensicworkflows ${{ matrix.os }}
          path: bin

  scripts:
    name: Python Script Plugin Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/setup-python@v1
        with: {python-version: '3.8'}
      - run: pip install pylint pytest pytest-cov
      - name: Checkout code
        uses: actions/checkout@v1
      - run: pip install -r requirements.txt
      - name: Python Lint
        run: pylint * --rcfile ../../test/.pylintrc
        shell: bash
        working-directory: config/scripts
      - name: Download testdata
        run: bash test/download_testdata.sh
        shell: bash
      - name: Python Test
        run: pytest -v --cov-config .coveragerc --cov-report=xml --cov=config/scripts test/python
        shell: bash
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f coverage.xml
        # if: matrix.os == 'windows-latest'
        shell: bash

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.13
        uses: actions/setup-go@v1
        with: {go-version: '1.13'}
      - name: Set system path
        run: echo "##[add-path]$(go env GOPATH)/bin"
        shell: bash
      - run: go get -u github.com/cugu/godoc2readme

      - name: Checkout code
        uses: actions/checkout@v1
      - run: godoc2readme --template docs/readme-template.md . > README2.md
      - run: diff README.md README2.md
